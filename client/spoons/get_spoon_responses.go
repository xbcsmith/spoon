// Code generated by go-swagger; DO NOT EDIT.

package spoons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/xbcsmith/spoon/models"
)

// GetSpoonReader is a Reader for the GetSpoon structure.
type GetSpoonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpoonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSpoonOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSpoonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSpoonNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetSpoonDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSpoonOK creates a GetSpoonOK with default headers values
func NewGetSpoonOK() *GetSpoonOK {
	return &GetSpoonOK{}
}

/*GetSpoonOK handles this case with default header values.

get a spoon operation
*/
type GetSpoonOK struct {
	Payload *models.Item
}

func (o *GetSpoonOK) Error() string {
	return fmt.Sprintf("[GET /v1/spoons/{id}][%d] getSpoonOK  %+v", 200, o.Payload)
}

func (o *GetSpoonOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Item)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpoonUnauthorized creates a GetSpoonUnauthorized with default headers values
func NewGetSpoonUnauthorized() *GetSpoonUnauthorized {
	return &GetSpoonUnauthorized{}
}

/*GetSpoonUnauthorized handles this case with default header values.

unauthorized
*/
type GetSpoonUnauthorized struct {
	Payload *models.Error
}

func (o *GetSpoonUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/spoons/{id}][%d] getSpoonUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpoonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpoonNotFound creates a GetSpoonNotFound with default headers values
func NewGetSpoonNotFound() *GetSpoonNotFound {
	return &GetSpoonNotFound{}
}

/*GetSpoonNotFound handles this case with default header values.

resource not found
*/
type GetSpoonNotFound struct {
	Payload *models.Error
}

func (o *GetSpoonNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/spoons/{id}][%d] getSpoonNotFound  %+v", 404, o.Payload)
}

func (o *GetSpoonNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpoonDefault creates a GetSpoonDefault with default headers values
func NewGetSpoonDefault(code int) *GetSpoonDefault {
	return &GetSpoonDefault{
		_statusCode: code,
	}
}

/*GetSpoonDefault handles this case with default header values.

generic error response
*/
type GetSpoonDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get spoon default response
func (o *GetSpoonDefault) Code() int {
	return o._statusCode
}

func (o *GetSpoonDefault) Error() string {
	return fmt.Sprintf("[GET /v1/spoons/{id}][%d] get_spoon default  %+v", o._statusCode, o.Payload)
}

func (o *GetSpoonDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
