// Code generated by go-swagger; DO NOT EDIT.

package spoons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new spoons API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for spoons API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSpoon add spoon API
*/
func (a *Client) AddSpoon(params *AddSpoonParams, authInfo runtime.ClientAuthInfoWriter) (*AddSpoonCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSpoonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add_spoon",
		Method:             "POST",
		PathPattern:        "/v1/spoons",
		ProducesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		ConsumesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddSpoonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSpoonCreated), nil

}

/*
DestroySpoon destroy spoon API
*/
func (a *Client) DestroySpoon(params *DestroySpoonParams, authInfo runtime.ClientAuthInfoWriter) (*DestroySpoonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroySpoonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "destroy_spoon",
		Method:             "DELETE",
		PathPattern:        "/v1/spoons/{id}",
		ProducesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		ConsumesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DestroySpoonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DestroySpoonNoContent), nil

}

/*
FindSpoons find spoons API
*/
func (a *Client) FindSpoons(params *FindSpoonsParams, authInfo runtime.ClientAuthInfoWriter) (*FindSpoonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindSpoonsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "find_spoons",
		Method:             "GET",
		PathPattern:        "/v1/spoons",
		ProducesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		ConsumesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FindSpoonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FindSpoonsOK), nil

}

/*
GetSpoon get spoon API
*/
func (a *Client) GetSpoon(params *GetSpoonParams, authInfo runtime.ClientAuthInfoWriter) (*GetSpoonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpoonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_spoon",
		Method:             "GET",
		PathPattern:        "/v1/spoons/{id}",
		ProducesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		ConsumesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSpoonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpoonOK), nil

}

/*
UpdateSpoon update spoon API
*/
func (a *Client) UpdateSpoon(params *UpdateSpoonParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSpoonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSpoonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_spoon",
		Method:             "PUT",
		PathPattern:        "/v1/spoons/{id}",
		ProducesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		ConsumesMediaTypes: []string{"application/com.github.xbcsmith.spoon.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateSpoonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSpoonOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
