// Code generated by go-swagger; DO NOT EDIT.

package spoons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/xbcsmith/spoon/models"
)

// FindSpoonsReader is a Reader for the FindSpoons structure.
type FindSpoonsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindSpoonsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindSpoonsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFindSpoonsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFindSpoonsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFindSpoonsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindSpoonsOK creates a FindSpoonsOK with default headers values
func NewFindSpoonsOK() *FindSpoonsOK {
	return &FindSpoonsOK{}
}

/*FindSpoonsOK handles this case with default header values.

list the spoon operations
*/
type FindSpoonsOK struct {
	Payload []*models.Item
}

func (o *FindSpoonsOK) Error() string {
	return fmt.Sprintf("[GET /v1/spoons][%d] findSpoonsOK  %+v", 200, o.Payload)
}

func (o *FindSpoonsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSpoonsUnauthorized creates a FindSpoonsUnauthorized with default headers values
func NewFindSpoonsUnauthorized() *FindSpoonsUnauthorized {
	return &FindSpoonsUnauthorized{}
}

/*FindSpoonsUnauthorized handles this case with default header values.

unauthorized
*/
type FindSpoonsUnauthorized struct {
	Payload *models.Error
}

func (o *FindSpoonsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/spoons][%d] findSpoonsUnauthorized  %+v", 401, o.Payload)
}

func (o *FindSpoonsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSpoonsNotFound creates a FindSpoonsNotFound with default headers values
func NewFindSpoonsNotFound() *FindSpoonsNotFound {
	return &FindSpoonsNotFound{}
}

/*FindSpoonsNotFound handles this case with default header values.

resource not found
*/
type FindSpoonsNotFound struct {
	Payload *models.Error
}

func (o *FindSpoonsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/spoons][%d] findSpoonsNotFound  %+v", 404, o.Payload)
}

func (o *FindSpoonsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSpoonsDefault creates a FindSpoonsDefault with default headers values
func NewFindSpoonsDefault(code int) *FindSpoonsDefault {
	return &FindSpoonsDefault{
		_statusCode: code,
	}
}

/*FindSpoonsDefault handles this case with default header values.

generic error response
*/
type FindSpoonsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find spoons default response
func (o *FindSpoonsDefault) Code() int {
	return o._statusCode
}

func (o *FindSpoonsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/spoons][%d] find_spoons default  %+v", o._statusCode, o.Payload)
}

func (o *FindSpoonsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
