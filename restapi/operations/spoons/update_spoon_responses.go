// Code generated by go-swagger; DO NOT EDIT.

package spoons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/xbcsmith/spoon/models"
)

// UpdateSpoonOKCode is the HTTP code returned for type UpdateSpoonOK
const UpdateSpoonOKCode int = 200

/*UpdateSpoonOK OK

swagger:response updateSpoonOK
*/
type UpdateSpoonOK struct {

	/*
	  In: Body
	*/
	Payload *models.Item `json:"body,omitempty"`
}

// NewUpdateSpoonOK creates UpdateSpoonOK with default headers values
func NewUpdateSpoonOK() *UpdateSpoonOK {

	return &UpdateSpoonOK{}
}

// WithPayload adds the payload to the update spoon o k response
func (o *UpdateSpoonOK) WithPayload(payload *models.Item) *UpdateSpoonOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update spoon o k response
func (o *UpdateSpoonOK) SetPayload(payload *models.Item) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSpoonOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSpoonUnauthorizedCode is the HTTP code returned for type UpdateSpoonUnauthorized
const UpdateSpoonUnauthorizedCode int = 401

/*UpdateSpoonUnauthorized unauthorized

swagger:response updateSpoonUnauthorized
*/
type UpdateSpoonUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSpoonUnauthorized creates UpdateSpoonUnauthorized with default headers values
func NewUpdateSpoonUnauthorized() *UpdateSpoonUnauthorized {

	return &UpdateSpoonUnauthorized{}
}

// WithPayload adds the payload to the update spoon unauthorized response
func (o *UpdateSpoonUnauthorized) WithPayload(payload *models.Error) *UpdateSpoonUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update spoon unauthorized response
func (o *UpdateSpoonUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSpoonUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateSpoonNotFoundCode is the HTTP code returned for type UpdateSpoonNotFound
const UpdateSpoonNotFoundCode int = 404

/*UpdateSpoonNotFound resource not found

swagger:response updateSpoonNotFound
*/
type UpdateSpoonNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSpoonNotFound creates UpdateSpoonNotFound with default headers values
func NewUpdateSpoonNotFound() *UpdateSpoonNotFound {

	return &UpdateSpoonNotFound{}
}

// WithPayload adds the payload to the update spoon not found response
func (o *UpdateSpoonNotFound) WithPayload(payload *models.Error) *UpdateSpoonNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update spoon not found response
func (o *UpdateSpoonNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSpoonNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateSpoonDefault error

swagger:response updateSpoonDefault
*/
type UpdateSpoonDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateSpoonDefault creates UpdateSpoonDefault with default headers values
func NewUpdateSpoonDefault(code int) *UpdateSpoonDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateSpoonDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update spoon default response
func (o *UpdateSpoonDefault) WithStatusCode(code int) *UpdateSpoonDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update spoon default response
func (o *UpdateSpoonDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update spoon default response
func (o *UpdateSpoonDefault) WithPayload(payload *models.Error) *UpdateSpoonDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update spoon default response
func (o *UpdateSpoonDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateSpoonDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
